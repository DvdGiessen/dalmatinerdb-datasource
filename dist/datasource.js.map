{"version":3,"sources":["../src/datasource.js"],"names":[],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\nimport {DalmatinerQuery} from \"./query\";\n\n\nexport class DalmatinerDatasource {\n\n  constructor(instanceSettings, $q, backendSrv) {\n    this.$q = $q;\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.srv = backendSrv;\n    if (instanceSettings.jsonData) {\n      this.authToken = instanceSettings.jsonData.auth ? instanceSettings.jsonData.authToken : null;\n    }\n  }\n\n  /*\n   * Datasource api methods\n   * ---------------------- */\n\n  // used by panels to get data\n  query(options) {\n    var query = this.getQuery(options);\n\n    if (! query)\n      return this.$q.resolve({data: []});\n\n    console.log('Running query: ' + query);\n    return this._request('/?q=' + encodeURIComponent(query))\n      .then(decode_series);\n  }\n\n  // used by datasource configuration page to make sure the connection is working\n  testDatasource() {\n    return this._request('').then(res => {\n      if (res.status === 200) {\n        return {status: \"success\", message: \"Data source is working\", title: \"Success\"};\n      }\n      return undefined;\n    });\n  }\n\n  // get query string\n  getQuery(options) {\n    var {range, interval, targets} = options,\n        fields = targets[0];\n\n    if (targets.length <= 0 ||\n        (! fields.collection.value) ||\n        (fields.metric.length <= 0))\n      return null;\n\n    return buildQuery(fields)\n      .beginningAt(range.from)\n      .endingAt(range.to)\n      .with('interval', interval)\n      .toString();\n  }\n\n  // get simplified query string that will be displayed when form is collapsed\n  getSimplifiedQuery(target) {\n    return buildQuery(target)\n      .with('interval', '$interval')\n      .toUserString();\n  }\n\n  getCollections() {\n    return this._request('/collections')\n      .then(decodeList);\n  }\n\n  getTagKeys({collection}) {\n    var c = collection.value;\n    return this._request(`/collections/${c}/namespaces`)\n      .then((res) => {\n        return this.$q.all(\n          _.reduce(res.data, (acc, ns) => {\n            if (ns != 'ddb') {\n              acc.push(this.getTagNamespaceKeys({collection}, ns));\n            }\n            return acc;\n          }, [])\n        );\n      })\n      .then(_.flatten);\n  }\n\n  getTagNamespaceKeys({collection}, namespace) {\n    var c = collection.value;\n    return this._request(`/collections/${c}/namespaces/${namespace}/tags`)\n      .then(_.partial(decodeTags, namespace));\n  }\n\n  getTagValues({collection}, [namespace, key]) {\n    var c = collection.value,\n        p = `/collections/${c}/namespaces/${namespace}/tags/${key}/values`;\n    return this._request(p)\n      .then(decodeList);\n  }\n\n  getMetrics({collection}, prefix = []) {\n    return this._request('/collections/' + collection.value + '/metrics')\n      .then(decodeMetrics)\n      .then(function(root) {\n        var n = root;\n        for (let p of prefix) {\n          n = n.children[p];\n          if (!n) return [];\n        }\n        return _.values(n.children);\n      });\n  }\n\n  /*\n   * Internal methods\n   */\n\n  _request(path, headers = {Accept: 'application/json'}) {\n    if (this.authToken) {\n      headers['Authorization'] = `Bearer ${this.authToken}`;\n    }\n    return this.srv.datasourceRequest({url: this.url + path, headers: headers});\n  }\n};\n\n\n// Decode data coming from Dalmatiner\nfunction decode_series(res) {\n  var {s, d} = res.data,\n      start = s * 1000;\n  return {data: (d || []).map(({n, v, r}) => {\n    return {\n      target: n,\n      datapoints: timestampPoints(v, start, r)\n    };\n  })};\n}\n\nfunction timestampPoints(values, start, increment) {\n  var r = new Array(values.length);\n  for (var i = 0; i < values.length; i++) {\n    r[i] = [values[i], start + (i * increment)];\n  }\n  return r;\n}\n\nfunction decodeList(res) {\n  return _.map(res.data, function (item) {\n    if (item == '')\n      return {value: '--null--', html: '-- empty --'};\n    return {value: item, html: item};\n  });\n}\n\nfunction decodeMetrics(res) {\n  var root = {children: {}};\n\n  for (let {key, parts} of res.data) {\n    let n = root;\n    for (let part of parts) {\n      if (! n.children[part]) {\n        n.children[part] = {\n          value: part,\n          html: part,\n          children: {}\n        };\n      }\n      n = n.children[part];\n    }\n  }\n  return root;\n}\n\nfunction decodeTags(ns, res) {\n  return _.map(res.data, function (tag) {\n    return {\n      html: (ns == '') ? tag : `${ns}:${tag}`,\n      value: JSON.stringify([ns, tag])};\n  });\n}\n\nfunction buildQuery(fields) {\n  var q = new DalmatinerQuery()\n        .from(fields.collection)\n        .select(fields.metric);\n\n  if (! _.isEmpty(fields.tags)) {\n    q.where(buildCondition(fields.tags));\n  }\n  _.each(fields.functions, function (fn) {\n    q.apply(fn.name, fn.args);\n  });\n\n  return q;\n}\n\nfunction buildCondition(tags) {\n  var stack = [],\n      condition;\n\n  // First run is to expand all operators, leaving only condition objects and\n  // condition keywords left on stack\n  for (let i = 0, tag; i < tags.length; i++) {\n    tag = tags[i];\n    if (tag.type === 'value') {\n      let operator = stack.pop(),\n          key = stack.pop(),\n          c;\n      assert(operator.type === 'operator', \"Expected operator, but got: \" + operator.type);\n      assert(key.type === 'key', \"Expected tag key, but got: \" + key.type);\n      if (tag.fake)\n        c = null;\n      else if (tag.value === '--null--')\n        c = DalmatinerQuery.present(JSON.parse(key.value));\n      else\n        c = DalmatinerQuery.equals(JSON.parse(key.value), tag.value);\n      stack.push(c);\n    } else {\n      stack.push(tags[i]);\n    }\n  }\n\n  // Now we iterate through stack to combine all conditions joining them by\n  // keyword\n  condition = stack.shift();\n  while (stack.length) {\n    let kwd = stack.shift(),\n        c = stack.shift();\n    if (condition === null) {\n      continue;\n    }\n    assert(kwd.type === 'condition', \"Expected condition keyword, but got: \" + JSON.stringify(c));\n    if (c === null)\n      continue;\n    switch (kwd.value) {\n    case('AND'):\n      condition = condition.and(c);\n      break;\n    case('OR'):\n      condition = condition.or(c);\n      break;\n    default:\n      throw new Error('Unexpected condition keyword: ' + kwd.value);\n    }\n  }\n\n  return condition;\n}\n\nfunction assert(condition, message) {\n  if (! condition) {\n    throw new Error(message);\n  }\n}\n"]}